@page "/invoices"
@using ExpenseTracker.Shared.Models
@using ExpenseTracker.Shared.Services
@inject ExpenseService ExpenseService
@rendermode InteractiveServer

<Microsoft.AspNetCore.Components.Web.PageTitle>Invoices - Expense Tracker</Microsoft.AspNetCore.Components.Web.PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2">Invoices</h1>
                <button class="btn btn-primary" @onclick="ShowAddForm">
                    <i data-lucide="plus" class="me-2"></i>
                    Add Invoice
                </button>
            </div>
        </div>
    </div>

    @if (showForm)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            @(editingInvoice != null ? "Edit Invoice" : "Add New Invoice")
                        </h5>
                    </div>
                    <div class="card-body">
                        <InvoiceForm
                            Invoice="@currentInvoice"
                            OnSave="@HandleSave"
                            OnCancel="@HandleCancel" />
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text">
                    <i data-lucide="search"></i>
                </span>
                <input type="text" class="form-control" placeholder="Search invoices..."
                       @bind="searchTerm" @oninput="OnSearchInput" />
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="filterCategory">
                <option value="">All Categories</option>
                <option value="Office Supplies">Office Supplies</option>
                <option value="Equipment">Equipment</option>
                <option value="Software">Software</option>
                <option value="Travel">Travel</option>
                <option value="Meals">Meals</option>
                <option value="Utilities">Utilities</option>
                <option value="Professional Services">Professional Services</option>
                <option value="Other">Other</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="sortBy">
                <option value="name">Sort by Name</option>
                <option value="amount">Sort by Amount</option>
                <option value="paymentDate">Sort by Payment Date</option>
                <option value="status">Sort by Status</option>
                <option value="category">Sort by Category</option>
            </select>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (filteredInvoices?.Any() == true)
            {
                <div class="row">
                    @foreach (var invoice in filteredInvoices)
                    {
                        <div class="col-md-6 col-lg-4 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <h5 class="card-title">@invoice.Name</h5>
                                        <span class="badge @GetStatusBadgeClass(invoice.PaymentStatus)">@invoice.PaymentStatus</span>
                                    </div>
                                    <h4 class="text-primary mb-2">$@invoice.Amount.ToString("F2")</h4>
                                    <p class="card-text text-muted mb-2">
                                        <strong>Invoice #:</strong> @invoice.InvoiceNumber
                                    </p>
                                    @if (!string.IsNullOrEmpty(invoice.Category))
                                    {
                                        <p class="card-text mb-2">
                                            <span class="badge bg-secondary">@invoice.Category</span>
                                        </p>
                                    }
                                    <p class="card-text">
                                        <small class="text-muted">
                                            Payment Date: @invoice.PaymentDate.ToString("MMM dd, yyyy")
                                        </small>
                                    </p>
                                    @if (invoice.DueDate.HasValue)
                                    {
                                        <p class="card-text">
                                            <small class="text-muted">
                                                Due Date: @invoice.DueDate.Value.ToString("MMM dd, yyyy")
                                            </small>
                                        </p>
                                    }
                                    @if (!string.IsNullOrEmpty(invoice.Notes))
                                    {
                                        <p class="card-text">@invoice.Notes</p>
                                    }
                                    @if (!string.IsNullOrEmpty(invoice.AttachmentUrl))
                                    {
                                        <p class="card-text">
                                            <a href="@invoice.AttachmentUrl" target="_blank" class="text-decoration-none">
                                                <i data-lucide="paperclip" class="me-1"></i>
                                                View Attachment
                                            </a>
                                        </p>
                                    }
                                </div>
                                <div class="card-footer bg-transparent">
                                    <div class="btn-group w-100" role="group">
                                        <button class="btn btn-outline-primary" @onclick="() => EditInvoice(invoice)">
                                            <i data-lucide="edit" class="me-1"></i>
                                            Edit
                                        </button>
                                        <button class="btn btn-outline-danger" @onclick="() => DeleteInvoice(invoice.Id)">
                                            <i data-lucide="trash-2" class="me-1"></i>
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center">
                    <div class="card">
                        <div class="card-body">
                            <i data-lucide="file-text" style="width: 64px; height: 64px;" class="text-muted mb-3"></i>
                            <h5 class="card-title">No invoices found</h5>
                            <p class="card-text text-muted">Start tracking your one-time expenses by adding your first invoice.</p>
                            <button class="btn btn-primary" @onclick="ShowAddForm">
                                <i data-lucide="plus" class="me-2"></i>
                                Add Your First Invoice
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Invoice> invoices = new();
    private List<Invoice> filteredInvoices = new();
    private bool isLoading = true;
    private bool showForm = false;
    private Invoice? editingInvoice;
    private Invoice currentInvoice = new();

    private string searchTerm = "";
    private string filterCategory = "";
    private string sortBy = "name";

    protected override async Task OnInitializedAsync()
    {
        await LoadInvoices();
    }

    private async Task LoadInvoices()
    {
        try
        {
            isLoading = true;
            invoices = await ExpenseService.GetInvoicesAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading invoices: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        var filtered = invoices.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(i =>
                i.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                i.InvoiceNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (i.Notes != null && i.Notes.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
        }

        // Apply category filter
        if (!string.IsNullOrWhiteSpace(filterCategory))
        {
            filtered = filtered.Where(i => i.Category == filterCategory);
        }

        // Apply sorting
        filtered = sortBy switch
        {
            "amount" => filtered.OrderByDescending(i => i.Amount),
            "paymentDate" => filtered.OrderByDescending(i => i.PaymentDate),
            "status" => filtered.OrderBy(i => i.PaymentStatus).ThenBy(i => i.Name),
            "category" => filtered.OrderBy(i => i.Category).ThenBy(i => i.Name),
            _ => filtered.OrderBy(i => i.Name)
        };

        filteredInvoices = filtered.ToList();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void ShowAddForm()
    {
        editingInvoice = null;
        currentInvoice = new Invoice();
        showForm = true;
    }

    private void EditInvoice(Invoice invoice)
    {
        editingInvoice = invoice;
        currentInvoice = new Invoice
        {
            Id = invoice.Id,
            Name = invoice.Name,
            Amount = invoice.Amount,
            Category = invoice.Category,
            InvoiceNumber = invoice.InvoiceNumber,
            PaymentStatus = invoice.PaymentStatus,
            PaymentDate = invoice.PaymentDate,
            DueDate = invoice.DueDate,
            AttachmentUrl = invoice.AttachmentUrl,
            Notes = invoice.Notes
        };
        showForm = true;
    }

    private async Task HandleSave(Invoice invoice)
    {
        try
        {
            if (editingInvoice != null)
            {
                await ExpenseService.UpdateInvoiceAsync(invoice);
            }
            else
            {
                await ExpenseService.CreateInvoiceAsync(invoice);
            }

            await LoadInvoices();
            showForm = false;
            editingInvoice = null;
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error saving invoice: {ex.Message}");
        }
    }

    private void HandleCancel()
    {
        showForm = false;
        editingInvoice = null;
    }

    private async Task DeleteInvoice(string id)
    {
        try
        {
            await ExpenseService.DeleteInvoiceAsync(id);
            await LoadInvoices();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error deleting invoice: {ex.Message}");
        }
    }

    private string GetStatusBadgeClass(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Paid => "bg-success",
            PaymentStatus.Pending => "bg-warning",
            PaymentStatus.Overdue => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
