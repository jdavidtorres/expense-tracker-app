name: Dependency Update Check

on:
  schedule:
    # Run every Monday at 8 AM UTC
    - cron: '0 8 * * 1'
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  dependency-update:
    name: Check for Package Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dotnet outdated tool
      run: dotnet tool install --global dotnet-outdated-tool

    - name: Check for outdated packages in Shared project
      run: dotnet outdated ExpenseTracker.Shared/ExpenseTracker.Shared.csproj --output json > shared-outdated.json
      continue-on-error: true

    - name: Check for outdated packages in Web project
      run: dotnet outdated ExpenseTracker.Web/ExpenseTracker.Web.csproj --output json > web-outdated.json
      continue-on-error: true

    - name: Check for outdated packages in MAUI project
      run: dotnet outdated ExpenseTracker.Maui/ExpenseTracker.Maui.csproj --output json > maui-outdated.json
      continue-on-error: true

    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          *-outdated.json
        retention-days: 30

    - name: Create issue for outdated packages
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let hasOutdated = false;
          let issueBody = '## ðŸ“¦ Outdated Package Report\n\n';
          
          const files = ['shared-outdated.json', 'web-outdated.json', 'maui-outdated.json'];
          const projectNames = ['Shared Library', 'Web Project', 'MAUI Project'];
          
          files.forEach((file, index) => {
            if (fs.existsSync(file)) {
              try {
                const content = fs.readFileSync(file, 'utf8');
                const data = JSON.parse(content);
                if (data.Projects && data.Projects.length > 0) {
                  hasOutdated = true;
                  issueBody += `### ${projectNames[index]}\n\n`;
                  data.Projects.forEach(project => {
                    if (project.TargetFrameworks) {
                      project.TargetFrameworks.forEach(tf => {
                        if (tf.Dependencies && tf.Dependencies.length > 0) {
                          issueBody += `**Target Framework: ${tf.TargetFramework}**\n\n`;
                          tf.Dependencies.forEach(dep => {
                            issueBody += `- **${dep.Name}**: ${dep.ResolvedVersion} â†’ ${dep.LatestVersion}\n`;
                          });
                          issueBody += '\n';
                        }
                      });
                    }
                  });
                }
              } catch (e) {
                console.log(`Error reading ${file}:`, e.message);
              }
            }
          });
          
          if (hasOutdated) {
            issueBody += '\n---\n\n';
            issueBody += 'This issue was automatically created by the dependency update workflow.\n';
            issueBody += 'Please review and update packages as appropriate.\n';
            
            // Check if there's already an open issue for dependency updates
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'dependencies',
              state: 'open'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Outdated Package Dependencies - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['dependencies', 'automated']
              });
            }
          }